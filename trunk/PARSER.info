**********************	QUE HAY QUE HACERLE	***********************
* Revisar la "dependencia" con el built in.
* Tener en cuenta los nombres de los STATE, habria que ponerle PARSER_STATE_EXIT.
(osea agregar PARSER_ a los estados).
* Fijarse en la funcion parse_set_state que retorna un numero de error, hay que
determinar esos numeros de errores, para ver si despues dentro de la estructura
del parser lo "almacenamos" y puede ser leido desde el baash.c.
* Modificar los printf de errores en parse_pipeline, y ademas fijarse que se 
reemplaza el self->err cuando se hace un parse_set_state.


**********************	ESTRUCTURA GENERAL	************************
Vamos a tomar al parser como una estructura con un lexer que nos va a servir 
para desfragmentar la cadena de texto (string proveniente del stdin) y 
convertirlo en un pipeline.

Posiblemente podriamos incluir un "int state" que nos diga en que tipo de estado
se encuentra (ya parseo, tiene el pipeline listo para devolver, hubo un error,
etc).













******************	TENER EN CUENTA		***********************
	* El tema de como controlar el flujo de stdin ya que el parser lee, como
lo dice la consigna desde el stdin.
	* Fijarse el tema de cuando devuelve el pipeline, que no se puede llegar
a los scommand, por lo que se genera leaks, hay que recorrer todo el pipe e ir
borrando todo.
	* Mirar bien el tema de que cuando se encuentra un & se termina el
reconocimiento de informacion. (deberia cambiarlo)

