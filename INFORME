
Baash: Bourne Again Again SHell

	A. Pérez Paladini , C.E. Budde , T. Hayes - Grupo 01
	Sistemas Operativos 2008
	FaMAF - UNC - Argentina

	27 de Agosto del año 2008

TADs utilizados

	Este proyecto cuenta con dos tipos abstractos de datos para el manejo de la información ingresada por teclado: los comandos simples y las tuberías. Ambos fueron construidos con interfaces opacas (con funciones públicas y la definición de la estructura privada) como se pidió en la cátedra. Esto se hizo para aumentar el grado de abstracción y facilitar así el manejo de los TADs por parte de los módulos.

	Para la implementación de ambos tipos se utilizó de manera extensiva la cola de Gnome: GQueue. La elección de esta estructura se debió al gran número de herramientas que proporciona para el manejo de la información que guarda, lo que se priorizó por sobre la memoria utilizada para las manipulaciones (que es mayor que una Glist por ejemplo)

	Un scommand (comando simple) es una secuencia de palabras. Representa una instrucción para ejecutar por el SO que el usuario le transfiere a la computadora a través del stdin, al estilo de "ls -l > new_file". Deben contener un comando (el nombre del programa cuya ejecución se solicita, en el ejemplo es "ls") que es la primera palabra ingresada, y además pueden incluir una serie de argumentos luego de dicho comando, los que modifican y/o condicionan el funcionamiento del mismo. Además se permite una redirección de los archivos de entrada y salida, mediante el uso de los caracteres '<' y '>' respectivamente. En el ejemplo la salida fue redirigida hacia el archivo "new_file", que en caso de no existir es creado, y en caso contrario es limpiado y sobreescrito.

	Un pipeline (tubería) es una cadena de scommands, separados entre ellos por el caracter '|'. Ese caracter indica que la salida del comando de su izquierda será la entrada del comando a su derecha. Este TAD fue implementado de tal forma que el nº de scommads que pueden ser así concatenado es indistinto. Al final del pipeline puede incluirse el caracter '&' para indicar que no se desea esperar hasta el fin dedel proceso. De esta forma varios programas pueden ser puestos a correr de manera "simultánea", al menos desde el punto de vista del usuario, ya que luego de ingresar el pipeline el prompt reaparece instantáneamente a la espera de una nueva instrucción.

Comentarios

	Hay un nº determinado de memory leaks y/o dangling pointers que se deben a la implementación interna de la GQueue utilizada. Para asegurarnos de que estas fallas no provenían de nuestros programas se realizaron "mini mains" de creación, manipulación y destrucción de ambos TADs que se repetían en ciclos de 50 o más loops. Al filtrar los resultados con valgrind, se descubrió que los "pointers to XX not-freed blocks" nunca cambiaban de nº (en particular XX=8), con lo que se consideró comprobada nuestra hipótesis.
